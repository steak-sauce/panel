<?php

namespace Pterodactyl\Services\Helpers;

use Illuminate\Filesystem\FilesystemManager;
use Illuminate\Contracts\Foundation\Application;
use Illuminate\Contracts\Cache\Repository as CacheRepository;

class AssetHashService
{
    /**
     * Location of the manifest file generated by gulp.
     */
    public const MANIFEST_PATH = './assets/manifest.json';

    /**
     * @var \Illuminate\Contracts\Cache\Repository
     */
    private $cache;

    /**
     * @var \Illuminate\Contracts\Filesystem\Filesystem
     */
    private $filesystem;

    /**
     * @var \Illuminate\Contracts\Foundation\Application
     */
    private $application;

    /**
     * @var null|array
     */
    protected static $manifest;

    /**
     * AssetHashService constructor.
     *
     * @param \Illuminate\Contracts\Foundation\Application $application
     * @param \Illuminate\Contracts\Cache\Repository       $cache
     * @param \Illuminate\Filesystem\FilesystemManager     $filesystem
     */
    public function __construct(Application $application, CacheRepository $cache, FilesystemManager $filesystem)
    {
        $this->application = $application;
        $this->cache = $cache;
        $this->filesystem = $filesystem->createLocalDriver(['root' => public_path()]);
    }

    /**
     * Modify a URL to append the asset hash.
     *
     * @param string $resource
     * @return string
     *
     * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException
     */
    public function url(string $resource): string
    {
        $file = last(explode('/', $resource));
        $data = array_get($this->manifest(), $file, $file);

        return str_replace($file, array_get($data, 'src', $file), $resource);
    }

    /**
     * Return the data integrity hash for a resource.
     *
     * @param string $resource
     * @return string
     *
     * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException
     */
    public function integrity(string $resource): string
    {
        $file = last(explode('/', $resource));
        $data = array_get($this->manifest(), $file, $file);

        return array_get($data, 'integrity', '');
    }

    /**
     * Return a built CSS import using the provided URL.
     *
     * @param string $resource
     * @return string
     *
     * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException
     */
    public function css(string $resource): string
    {
        return '<link href="' . $this->url($resource) . '"
                    rel="stylesheet preload"
                    as="style"
                    crossorigin="anonymous"
                    integrity="' . $this->integrity($resource) . '"
                    referrerpolicy="no-referrer">';
    }

    /**
     * Return a built JS import using the provided URL.
     *
     * @param string $resource
     * @return string
     *
     * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException
     */
    public function js(string $resource): string
    {
        return '<script src="' . $this->url($resource) . '"
                    integrity="' . $this->integrity($resource) . '"
                    crossorigin="anonymous"></script>';
    }

    /**
     * Get the asset manifest and store it in the cache for quicker lookups.
     *
     * @return array
     *
     * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException
     */
    protected function manifest(): array
    {
        if (! is_null(self::$manifest)) {
            return self::$manifest;
        }

        // Skip checking the cache if we are not in production.
        if ($this->application->environment() === 'production') {
            $stored = $this->cache->get('Core:AssetManifest');
            if (! is_null($stored)) {
                return self::$manifest = $stored;
            }
        }

        $contents = json_decode($this->filesystem->get(self::MANIFEST_PATH), true);
        $this->cache->put('Core:AssetManifest', $contents, 1440);

        return self::$manifest = $contents;
    }
}
